import logging
import asyncio
import aiohttp
import sqlite3
import random
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = 'YOUR_BOT_TOKEN_HERE'
ADMIN_ID = 123456789  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
PROVIDER_TOKEN = 'YOUR_CRYSTALPAY_TOKEN'  # –î–ª—è –ø–ª–∞—Ç–µ–∂–µ–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
conn = sqlite3.connect('virtual_numbers.db')
cursor = conn.cursor()

# –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    user_id INTEGER UNIQUE,
    username TEXT,
    full_name TEXT,
    balance REAL DEFAULT 0,
    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
''')

# –¢–∞–±–ª–∏—Ü–∞ –Ω–æ–º–µ—Ä–æ–≤
cursor.execute('''
CREATE TABLE IF NOT EXISTS numbers (
    id INTEGER PRIMARY KEY,
    number TEXT UNIQUE,
    country TEXT,
    service TEXT,
    price REAL,
    status TEXT DEFAULT 'available',
    activation_time TIMESTAMP,
    user_id INTEGER,
    sms_code TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users (user_id)
)
''')

# –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    amount REAL,
    type TEXT,
    status TEXT DEFAULT 'pending',
    details TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users (user_id)
)
''')

# –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä–∞–Ω –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
cursor.execute('''
CREATE TABLE IF NOT EXISTS services (
    id INTEGER PRIMARY KEY,
    country TEXT,
    country_code TEXT,
    service_name TEXT,
    service_code TEXT,
    price REAL,
    available INTEGER DEFAULT 1
)
''')

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
cursor.execute("SELECT COUNT(*) FROM services")
if cursor.fetchone()[0] == 0:
    services_data = [
        ('–†–æ—Å—Å–∏—è', 'RU', 'Telegram', 'tg', 50.0),
        ('–†–æ—Å—Å–∏—è', 'RU', 'WhatsApp', 'wa', 45.0),
        ('–†–æ—Å—Å–∏—è', 'RU', 'VKontakte', 'vk', 40.0),
        ('–°–®–ê', 'US', 'Telegram', 'tg', 70.0),
        ('–°–®–ê', 'US', 'WhatsApp', 'wa', 65.0),
        ('–£–∫—Ä–∞–∏–Ω–∞', 'UA', 'Telegram', 'tg', 55.0),
        ('–£–∫—Ä–∞–∏–Ω–∞', 'UA', 'Viber', 'vb', 48.0),
        ('–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', 'KZ', 'WhatsApp', 'wa', 52.0),
        ('–ì–µ—Ä–º–∞–Ω–∏—è', 'DE', 'Telegram', 'tg', 80.0),
        ('–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', 'GB', 'WhatsApp', 'wa', 75.0)
    ]
    
    for country, code, service, s_code, price in services_data:
        cursor.execute(
            "INSERT INTO services (country, country_code, service_name, service_code, price) VALUES (?, ?, ?, ?, ?)",
            (country, code, service, s_code, price)
        )

conn.commit()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
def generate_virtual_number(country_code):
    prefixes = {
        'RU': ['7916', '7903', '7920'],
        'US': ['1201', '1212', '1234'],
        'UA': ['38050', '38063', '38067'],
        'KZ': ['7700', '7701', '7702'],
        'DE': ['4915', '4916', '4917'],
        'GB': ['4477', '4478', '4479']
    }
    
    prefix = random.choice(prefixes.get(country_code, ['7916']))
    number = prefix + ''.join([str(random.randint(0, 9)) for _ in range(11 - len(prefix))])
    return number

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OrderStates(StatesGroup):
    choosing_country = State()
    choosing_service = State()
    confirming_purchase = State()
    waiting_for_sms = State()

class AdminStates(StatesGroup):
    adding_balance = State()
    adding_numbers = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì± –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä"))
    keyboard.add(KeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å"), KeyboardButton("üìä –ú–æ–∏ –Ω–æ–º–µ—Ä–∞"))
    keyboard.add(KeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    return keyboard

# –ú–µ–Ω—é —Å—Ç—Ä–∞–Ω
def countries_menu():
    cursor.execute("SELECT DISTINCT country, country_code FROM services WHERE available = 1")
    countries = cursor.fetchall()
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    for country, code in countries:
        keyboard.add(InlineKeyboardButton(f"üá∫üá≥ {country}", callback_data=f"country_{code}"))
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return keyboard

# –ú–µ–Ω—é —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
def services_menu(country_code):
    cursor.execute("SELECT service_name, service_code, price FROM services WHERE country_code = ? AND available = 1", (country_code,))
    services = cursor.fetchall()
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    for service, code, price in services:
        keyboard.add(InlineKeyboardButton(f"{service} - {price} —Ä—É–±", callback_data=f"service_{code}"))
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_countries"))
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute(
        "INSERT OR IGNORE INTO users (user_id, username, full_name) VALUES (?, ?, ?)",
        (user_id, username, full_name)
    )
    conn.commit()
    
    welcome_text = """üî¢ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VirtualNumbersBot!</b>

üì± <b>–ù–∞—à–∏ —É—Å–ª—É–≥–∏:</b>
‚Ä¢ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
‚Ä¢ –ù–∏–∑–∫–∏–µ —Ü–µ–Ω—ã

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:</b>
‚Ä¢ Telegram, WhatsApp, Viber
‚Ä¢ VKontakte, Instagram
‚Ä¢ –ò –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    await message.answer(welcome_text, reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(lambda message: message.text == "üì± –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä")
async def buy_number(message: types.Message):
    await message.answer("üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:</b>", reply_markup=countries_menu())

@dp.message_handler(lambda message: message.text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()
    
    if balance:
        await message.answer(f"üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {balance[0]} —Ä—É–±\n\nüíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å: /balance")
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

@dp.message_handler(lambda message: message.text == "üìä –ú–æ–∏ –Ω–æ–º–µ—Ä–∞")
async def show_my_numbers(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('''
        SELECT n.number, n.country, n.service, n.activation_time, n.sms_code 
        FROM numbers n 
        WHERE n.user_id = ? AND n.status = 'active'
    ''', (user_id,))
    
    numbers = cursor.fetchall()
    
    if numbers:
        text = "üì± <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:</b>\n\n"
        for number, country, service, activation_time, sms_code in numbers:
            text += f"‚Ä¢ {number} ({country}) - {service}\n"
            text += f"  üïê –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {activation_time}\n"
            if sms_code:
                text += f"  üì® –ö–æ–¥: {sms_code}\n"
            text += "\n"
        await message.answer(text)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤")

@dp.message_handler(lambda message: message.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    support_text = """üÜò <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>

üìû –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º:
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏

üë®‚Äçüíª –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: @support_username

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7"""
    await message.answer(support_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
@dp.callback_query_handler(lambda c: c.data.startswith('country_'))
async def country_selected(call: types.CallbackQuery):
    country_code = call.data.split('_')[1]
    cursor.execute("SELECT country FROM services WHERE country_code = ? LIMIT 1", (country_code,))
    country = cursor.fetchone()
    
    if country:
        await call.message.edit_text(f"üá∫üá≥ <b>–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞:</b> {country[0]}\n\nüì≤ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:</b>", 
                                   reply_markup=services_menu(country_code))
    else:
        await call.answer("‚ùå –°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
@dp.callback_query_handler(lambda c: c.data.startswith('service_'))
async def service_selected(call: types.CallbackQuery, state: FSMContext):
    service_code = call.data.split('_')[1]
    user_id = call.from_user.id
    
    cursor.execute('''
        SELECT s.country, s.country_code, s.service_name, s.price 
        FROM services s 
        WHERE s.service_code = ? AND s.available = 1
    ''', (service_code,))
    
    service = cursor.fetchone()
    
    if service:
        country, country_code, service_name, price = service
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        balance = cursor.fetchone()
        
        if balance and balance[0] >= price:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
            number = generate_virtual_number(country_code)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                country=country,
                country_code=country_code,
                service=service_name,
                price=price,
                number=number
            )
            
            confirm_text = f"""‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>

üì± –ù–æ–º–µ—Ä: +{number}
üåç –°—Ç—Ä–∞–Ω–∞: {country}
üì≤ –°–µ—Ä–≤–∏—Å: {service_name}
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "–ö—É–ø–∏—Ç—å" """
            
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data="confirm_purchase"))
            keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_purchase"))
            
            await call.message.edit_text(confirm_text, reply_markup=keyboard)
            await OrderStates.confirming_purchase.set()
            
        else:
            await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            await call.message.answer(f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance[0] if balance else 0} —Ä—É–±\n–ù—É–∂–Ω–æ: {price} —Ä—É–±\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å: /balance")
    else:
        await call.answer("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'confirm_purchase', state=OrderStates.confirming_purchase)
async def confirm_purchase(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    data = await state.get_data()
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (data['price'], user_id))
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–æ–º–µ—Ä–µ
    cursor.execute('''
        INSERT INTO numbers (number, country, service, price, status, activation_time, user_id)
        VALUES (?, ?, ?, ?, 'active', datetime('now'), ?)
    ''', (data['number'], data['country'], data['service'], data['price'], user_id))
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    cursor.execute('''
        INSERT INTO transactions (user_id, amount, type, status, details)
        VALUES (?, ?, 'purchase', 'completed', ?)
    ''', (user_id, data['price'], f"–ü–æ–∫—É–ø–∫–∞ –Ω–æ–º–µ—Ä–∞ {data['number']} –¥–ª—è {data['service']}"))
    
    conn.commit()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π SMS –∫–æ–¥
    sms_code = ''.join([str(random.randint(0, 9)) for _ in range(6)])
    cursor.execute("UPDATE numbers SET sms_code = ? WHERE number = ?", (sms_code, data['number']))
    conn.commit()
    
    success_text = f"""üéâ <b>–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!</b>

üì± –ù–æ–º–µ—Ä: +{data['number']}
üåç –°—Ç—Ä–∞–Ω–∞: {data['country']}
üì≤ –°–µ—Ä–≤–∏—Å: {data['service']}
üíµ –°–ø–∏—Å–∞–Ω–æ: {data['price']} —Ä—É–±

üì® <b>–û–∂–∏–¥–∞–π—Ç–µ SMS:</b>
–ö–æ–¥ –ø—Ä–∏–¥—ë—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 –º–∏–Ω—É—Ç

üîÑ <b>–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥:</b> /refresh_{data['number']}"""
    
    await call.message.edit_text(success_text)
    await state.finish()
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–∏—Ö–æ–¥ SMS —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã
    asyncio.create_task(send_sms_after_delay(data['number'], sms_code, user_id))

async def send_sms_after_delay(number, sms_code, user_id):
    await asyncio.sleep(random.randint(60, 120))
    try:
        await bot.send_message(
            user_id,
            f"üì® <b>–ù–æ–≤–æ–µ SMS –Ω–∞ –Ω–æ–º–µ—Ä +{number}:</b>\n\nüî¢ –ö–æ–¥: <code>{sms_code}</code>\n\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"Failed to send SMS notification: {e}")

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=['admin'], user_id=ADMIN_ID)
async def admin_panel(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    keyboard.add(InlineKeyboardButton("üíµ –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_add_balance"))
    keyboard.add(InlineKeyboardButton("üì± –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞", callback_data="admin_add_numbers"))
    
    await message.answer("‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup(dp):
    logging.info("Virtual Numbers Bot started")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)